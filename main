import streamlit as st
import groq
import os
import json
import time

client = groq.Groq(api_key='gsk...')

def make_api_call(messages, max_tokens, is_final_answer=False):
    for attempt in range(3):
        try:
            response = client.chat.completions.create(
                model="llama-3.1-70b-versatile",
                messages=messages,
                max_tokens=max_tokens,
                temperature=0.2,
                response_format={"type": "json_object"}
            )
            return json.loads(response.choices[0].message.content)
        except Exception as e:
            if attempt == 2:
                if is_final_answer:
                    return {"title": "Error", "content": f"Failed to generate final answer after 3 attempts. Error: {str(e)}"}
                else:
                    return {"title": "Error", "content": f"Failed to generate step after 3 attempts. Error: {str(e)}", "next_action": "final_answer"}
            time.sleep(1)  # Wait for 1 second before retrying

def generate_response(prompt):
    messages = [
        {"role": "system", "content": """You are an expert AI assistant that explains your reasoning step by step. For each step, provide a title that describes what you're doing in that step, along with the content. Decide if you need another step or if you're ready to give the final answer. Respond in JSON format with the following keys:

- 'title': A title for the step.
- 'content': The content of the step.
- 'next_action': Either 'continue' or 'final_answer'.
- 'save_memory': Either 'true' or 'false'. Decide if you want to store anything in memory.
- If 'save_memory' is 'true', include a 'memory_content' field with what you want to store in memory.
- 'weight': A number between 0.00 and 1. Assign a weight to the memory.
- 'recall_titles': 'true' or 'false'. If 'true', you will receive the titles of all stored memories.
- 'recall_memories': A list of titles of the memories you want to recall.
- 'recall_operator': 'higher' or 'lower'. Specify whether to recall memories with weight higher or lower than a certain number.
- 'recall_weight': A number between 0.00 and 1. Recall memories with weight higher or lower than this number, depending on 'recall_operator'.

USE AS MANY REASONING STEPS AS POSSIBLE. AT LEAST 3. BE AWARE OF YOUR LIMITATIONS AS AN LLM AND WHAT YOU CAN AND CANNOT DO. IN YOUR REASONING, INCLUDE EXPLORATION OF ALTERNATIVE ANSWERS. CONSIDER YOU MAY BE WRONG, AND IF YOU ARE WRONG IN YOUR REASONING, WHERE IT WOULD BE. FULLY TEST ALL OTHER POSSIBILITIES. YOU CAN BE WRONG. WHEN YOU SAY YOU ARE RE-EXAMINING, ACTUALLY RE-EXAMINE, AND USE ANOTHER APPROACH TO DO SO. DO NOT JUST SAY YOU ARE RE-EXAMINING. USE AT LEAST 3 METHODS TO DERIVE THE ANSWER. USE BEST PRACTICES.

Example of a valid JSON response:

{
    "title": "Identifying Key Information",
    "content": "To begin solving this problem, we need to carefully examine the given information and identify the crucial elements that will guide our solution process. This involves...",
    "next_action": "continue",
    "save_memory": "false",
    "weight": null,
    "recall_titles": "false",
    "recall_memories": [],
    "recall_operator": null,
    "recall_weight": null
}

"""},

        {"role": "user", "content": prompt},
        {"role": "assistant", "content": "Thank you! I will now think step by step following my instructions, starting at the beginning after decomposing the problem."}
    ]

    steps = []
    step_count = 1
    total_thinking_time = 0

    # Load existing memories
    if os.path.exists('memories.json'):
        with open('memories.json', 'r') as f:
            memories = json.load(f)
    else:
        memories = []

    step_data = {}  # Initialize step_data

    while True:
        # Before making the API call, check if the assistant requested 'recall_titles' or 'recall_memories' in the previous step
        if step_count > 1:
            # Handle 'recall_titles'
            if step_data.get('recall_titles') == 'true':
                memory_titles = [memory['title'] for memory in memories]
                # Provide the titles to the assistant
                messages.append({"role": "system", "content": f"Memory Titles: {memory_titles}"})

            # Handle 'recall_memories'
            if step_data.get('recall_memories'):
                # Recall specific memories by title
                requested_titles = step_data['recall_memories']
                recalled_memories = [memory for memory in memories if memory['title'] in requested_titles]
                # Provide the recalled memories to the assistant
                messages.append({"role": "system", "content": f"Recalled Memories: {recalled_memories}"})

            # Handle 'recall_operator' and 'recall_weight'
            if step_data.get('recall_operator') and step_data.get('recall_weight') is not None:
                operator = step_data['recall_operator']
                weight = float(step_data['recall_weight'])
                if operator == 'higher':
                    recalled_memories = [memory for memory in memories if memory['weight'] > weight]
                elif operator == 'lower':
                    recalled_memories = [memory for memory in memories if memory['weight'] < weight]
                else:
                    recalled_memories = []
                # Provide the recalled memories to the assistant
                messages.append({"role": "system", "content": f"Recalled Memories: {recalled_memories}"})

        # Make the API call
        start_time = time.time()
        step_data = make_api_call(messages, 300)
        end_time = time.time()
        thinking_time = end_time - start_time
        total_thinking_time += thinking_time

        # Save the step
        steps.append((f"Step {step_count}: {step_data['title']}", step_data['content'], thinking_time))

        # Handle 'save_memory'
        if step_data.get('save_memory') == 'true':
            # Save the memory
            memory_content = step_data.get('memory_content', '')
            memory_weight = float(step_data.get('weight', 0))
            memory_title = step_data.get('title', f'Memory {len(memories)+1}')
            memory = {
                'title': memory_title,
                'content': memory_content,
                'weight': memory_weight
            }
            memories.append(memory)
            # Save memories to file
            with open('memories.json', 'w') as f:
                json.dump(memories, f)

        # Add assistant's response to messages
        messages.append({"role": "assistant", "content": json.dumps(step_data)})

        if step_data['next_action'] == 'final_answer':
            break

        step_count += 1

        # Yield after each step for Streamlit to update
        yield steps, None  # We're not yielding the total time until the end

    # Generate final answer
    messages.append({"role": "user", "content": "Please provide the final answer based on your reasoning above."})

    start_time = time.time()
    final_data = make_api_call(messages, 200, is_final_answer=True)
    end_time = time.time()
    thinking_time = end_time - start_time
    total_thinking_time += thinking_time

    steps.append(("Final Answer", final_data['content'], thinking_time))

    yield steps, total_thinking_time

def main():
    st.set_page_config(page_title="g1 prototype", page_icon="ðŸ§ ", layout="wide")

    st.title("g1: Using Llama-3.1 70b on Groq to create o1-like reasoning chains")

    st.markdown("""
    This is an early prototype of using prompting to create o1-like reasoning chains to improve output accuracy. It is not perfect and accuracy has yet to be formally evaluated. It is powered by Groq so that the reasoning step is fast!

    Open source [repository here](https://github.com/bklieger-groq)
    """)

    # Text input for user query
    user_query = st.text_input("Enter your query:", placeholder="e.g., How many 'R's are in the word strawberry?")

    if user_query:
        st.write("Generating response...")

        # Create empty elements to hold the generated text and total time
        response_container = st.empty()
        time_container = st.empty()

        # Generate and display the response
        for steps, total_thinking_time in generate_response(user_query):
            with response_container.container():
                for i, (title, content, thinking_time) in enumerate(steps):
                    if title.startswith("Final Answer"):
                        st.markdown(f"### {title}")
                        st.markdown(content.replace('\n', '<br>'), unsafe_allow_html=True)
                    else:
                        with st.expander(title, expanded=True):
                            st.markdown(content.replace('\n', '<br>'), unsafe_allow_html=True)

            # Only show total time when it's available at the end
            if total_thinking_time is not None:
                time_container.markdown(f"**Total thinking time: {total_thinking_time:.2f} seconds**")

if __name__ == "__main__":
    main()
